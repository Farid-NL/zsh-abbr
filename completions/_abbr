#compdef abbr
# ------------------------------------------------------------------------------
#  Completion script for zsh-abbr
#
# https://github.com/olets/zsh-abbr
# v5.7.1
# Copyright (c) 2019-present Henry Bley-Vroman
#
# Licensed under the same license as zsh-abbr. See zsh-abbr's LICENSE file
#
# ------------------------------------------------------------------------------

_abbr (){
  local state line

  local -i ret

  ret=1

  _arguments -C \
    '--help[Show the manpage.]' \
    '(-v --version)'{-v,--version}'[Show the current version.]' \
    '1: :->cmds' \
    '*:: :->args' && ret=0

  case $state in
    cmds)
      local commands; commands=(
        'a:Add a new abbreviation.'
        'add:Add a new abbreviation.'
        'c:Erase all session abbreviations.'
        'clear-session:Erase all session abbreviations.'
        'e:Erase an abbreviation.'
        'erase:Erase an abbreviation.'
        "x:Output the ABBREVIATION's EXPANSION."
        "expand:Output the ABBREVIATION's EXPANSION."
        'export-aliases:Export abbreviations as alias commands.'
        'g:Add a regular abbreviation, the expansion of which is prefixed with git; and add a global abbreviation, the abbreviation and expansion of which are prefixed with git.'
        'git:Add a regular abbreviation, the expansion of which is prefixed with git; and add a global abbreviation, the abbreviation and expansion of which are prefixed with git.'
        'help:Show the manpage.'
        'import-aliases:Add regular abbreviations for every regular alias in the session, and global abbreviations for every global alias in the session.'
        'import-fish:Import fish abbr-syntax abbreviations.'
        'import-git-aliases:Add regular abbreviations for every Git alias in the current session. The EXPANSION is prefixed with git[Space].'
        'list:List the abbreviations with their expansions.'
        'l:List the abbreviations only.'
        'list-abbreviations:List the abbreviations only.'
        'list-commands:List as commands suitable for export.'
        'profile:Log profile information for debugging.'
        'R:Rename an abbreviation.'
        'rename:Rename an abbreviation.'
        'version:Show the current version.'
      )
      _describe 'abbr commands' commands
      ret=0
      ;;
    args)
      case $line[1] in
        a|\
        add)
          # [<SCOPE>] [<TYPE>] [--dry-run] [(--quiet | --quieter)] [(-f | --force)] ABBREVIATION=EXPANSION
          _arguments \
            '(-S --session -U --user)'{-S,--session}'[available in this session]' \
            '(-U --user -S --session)'{-U,--user}'[available in all sessions]' \
            '(-r --regular -g --global)'{-r,--regular}'[expand at the start of the line]' \
            '(-g --global -r --regular)'{-g,--global}'[expand everywhere]' \
            '(--dry-run)--dry-run[see what would result, without making any actual changes]' \
            '(-q --quiet -qq --quieter)'{-q,--quiet}'[silence success output]' \
            '(-qq --quieter -q --quiet)'{-qq,--quieter}'[silence success output and warnings]' \
            '(-f --force)'{-f,--force}'[ignore warnings]'
          ret=0
          ;;
        e|\
        erase)
          # [<SCOPE>] [<TYPE>] [--dry-run] [--quiet] ABBREVIATION
          _arguments \
            '(-S --session -U --user)'{-S,--session}'[available in this session]' \
            '(-U --user -S --session)'{-U,--user}'[available in all sessions]' \
            '(-r --regular -g --global)'{-r,--regular}'[expand at the start of the line]' \
            '(-g --global -r --regular)'{-g,--global}'[expand everywhere]' \
            '(--dry-run)--dry-run[see what would result, without making any actual changes]' \
            '(-q --quiet)'{-q,--quiet}'[silence success output]' \
            '1: :__abbr_abbreviations'
          ret=0
          ;;
        export-aliases|\
        list|\
        l|\
        list-abbreviations|\
        L|\
        list-commands)
          # [<SCOPE>] [<TYPE>]
          _arguments \
            '(-S --session -U --user)'{-S,--session}'[available in this session]' \
            '(-U --user -S --session)'{-U,--user}'[available in all sessions]' \
            '(-r --regular -g --global)'{-r,--regular}'[expand at the start of the line]' \
            '(-g --global -r --regular)'{-g,--global}'[expand everywhere]'
          ret=0
            ;;
        git)
          # [<SCOPE>] [--dry-run] [(--quiet | --quieter)] [(-f | --force)] ABBREVIATION=EXPANSION
          _arguments \
            '(-S --session -U --user)'{-S,--session}'[available in this session]' \
            '(-U --user -S --session)'{-U,--user}'[available in all sessions]' \
            '(--dry-run)--dry-run[see what would result, without making any actual changes]' \
            '(-q --quiet -qq --quieter)'{-q,--quiet}'[silence success output]' \
            '(-qq --quieter -q --quiet)'{-qq,--quieter}'[silence success output and warnings]' \
            '(-f --force)'{-f,--force}'[ignore warnings]'
          ret=0
          ;;
        import-aliases)
          # [<TYPE>] [--dry-run] [(--quiet | --quieter)] [(-f | --force)]
          _arguments \
            '(-r --regular -g --global)'{-r,--regular}'[expand at the start of the line]' \
            '(-g --global -r --regular)'{-g,--global}'[expand everywhere]' \
            '(--dry-run)--dry-run[see what would result, without making any actual changes]' \
            '(-q --quiet -qq --quieter)'{-q,--quiet}'[silence success output]' \
            '(-qq --quieter -q --quiet)'{-qq,--quieter}'[silence success output and warnings]' \
            '(-f --force)'{-f,--force}'[ignore warnings]'
          ret=0
            ;;
        import-fish)
          # [<SCOPE>] [--dry-run] [(--quiet | --quieter)] [(-f | --force)] FILE
          _arguments \
            '(-S --session -U --user)'{-S,--session}'[available in this session]' \
            '(-U --user -S --session)'{-U,--user}'[available in all sessions]' \
            '(--dry-run)--dry-run[see what would result, without making any actual changes]' \
            '(-q --quiet -qq --quieter)'{-q,--quiet}'[silence success output]' \
            '(-qq --quieter -q --quiet)'{-qq,--quieter}'[silence success output and warnings]' \
            '(-f --force)'{-f,--force}'[ignore warnings]'
          ret=0
          ;;
        import-git-aliases)
          # [<SCOPE>] [<TYPE>] [--dry-run] [(--quiet | --quieter)] [(-f | --force)] [--file <config-file>] [--prefix <ABBREVIATION prefix>]
          _arguments \
            '(-S --session -U --user)'{-S,--session}'[available in this session]' \
            '(-U --user -S --session)'{-U,--user}'[available in all sessions]' \
            '(-r --regular -g --global)'{-r,--regular}'[expand at the start of the line]' \
            '(-g --global -r --regular)'{-g,--global}'[expand everywhere]' \
            '(--dry-run)--dry-run[see what would result, without making any actual changes]' \
            '(-q --quiet -qq --quieter)'{-q,--quiet}'[silence success output]' \
            '(-qq --quieter -q --quiet)'{-qq,--quieter}'[silence success output and warnings]' \
            '(-f --force)'{-f,--force}'[ignore warnings]' \
            '(--file)--file[path to a Git config file]:filename:_files -/' \
            '(--prefix)--prefix[prefix added to the ABBREVIATIONs]'
          ret=0
          ;;
        R|\
        rename)
          # [<SCOPE>] [<TYPE>] [--dry-run] [(--quiet | --quieter)] [(-f | --force)] OLD NEW
          _arguments \
            '(-S --session -U --user)'{-S,--session}'[available in this session]' \
            '(-U --user -S --session)'{-U,--user}'[available in all sessions]' \
            '(-r --regular -g --global)'{-r,--regular}'[expand at the start of the line]' \
            '(-g --global -r --regular)'{-g,--global}'[expand everywhere]' \
            '(--dry-run)--dry-run[see what would result, without making any actual changes]' \
            '(-q --quiet -qq --quieter)'{-q,--quiet}'[silence success output]' \
            '(-qq --quieter -q --quiet)'{-qq,--quieter}'[silence success output and warnings]' \
            '(-f --force)'{-f,--force}'[ignore warnings]' \
            '1: :__abbr_abbreviations'
          ret=0
          ;;
      esac
      ;;
  esac

  return ret
}

(( $+functions[__abbr_extract_abbreviations] )) ||
__abbr_extract_abbreviations() {
  local -a tmp_abbr tmp_expd
  local scope type

  if (( $words[(Ie)-U] || $words[(Ie)--user] )); then
    scope='-U'
  elif (( $words[(Ie)-S] || $words[(I)--session] )); then
    scope='-S'
  elif (( $words[(Ie)-r] || $words[(Ie)--regular] )); then
    type='-r'
  elif (( $words[(Ie)-g] || $words[(Ie)--global] )); then
    type='-g'
  fi

  tmp_abbr=(${${(f)"$(_call_program abbreviations abbr list-abbreviations $scope $type 2>/dev/null)"}//\"/})
  tmp_expd=(${${${${(f)"$(_call_program abbreviations abbr list $scope $type 2>/dev/null)"}#*=}#\"}%\"})

  if (( ${#ABBR_REGULAR_USER_ABBREVIATIONS} )); then
    local len=${#tmp_abbr}
    for (( i = 1; i <= len; i++ )); do
      abbreviations+=(${tmp_abbr[$i]}:${tmp_expd[$i]})
    done
  else
    abbreviations=()
  fi
}

(( $+functions[__abbr_abbreviations] )) ||
__abbr_abbreviations() {
  local -a abbreviations
  __abbr_extract_abbreviations

  _describe -t abbreviations 'abbr abbreviations' abbreviations
}

_abbr
